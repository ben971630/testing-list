透過文件控制（documentation control），能記錄任何工程專案內各個模組的改動歷程，並為每次改動編上序號。
最簡單的例子是，最初的版本指定為「1」，當做了改變之後，版本編號增加為「2」，以此類推。

最簡單的版本控制就是保留軟體不同版本的數份copy，並且適當編號。許多大型開發案都是使用這種簡單技巧。雖然這種方法能用，但是很沒效率。一是因為儲存的數份copy幾乎完全一樣

集中版本控制：
共用同一個「檔案庫（repository）」，無論這個檔案庫是在同一部工作站，或可透過網路存取的檔案系統上的本地端檔案庫，還是透過一個特定的通訊協定可以存取的遠端檔案庫，所有的成員都是共同存取同一份檔案庫。這種方式，就被稱為集中式（centralized）的版本控制系統。

針對你正在開發的專案，版本記錄系統會追蹤每次 commit 的：

更動前 v.s. 更動後的程式碼
修改者
修改時間
修改原因（修改者需要自行撰寫 commit message）

Git可以把檔案的狀態作為更新歷史記錄保存起來。因此可以把編輯過的檔案復原到以前的狀態，也可以顯示編輯過內容的差異。
而且，當有人想將編輯過的舊檔案上傳到伺服器、覆蓋其他人的最新檔案時，系統會發出警告，因此可以避免在無意中覆蓋他人的編輯內容。